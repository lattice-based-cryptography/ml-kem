use crate::utils::{Parameters, hash_h, hash_g, encode_vec, generate_matrix_from_seed, generate_error_vector};
use module_lwe::utils::{gen_uniform_matrix,mul_mat_vec_simple,gen_small_vector,add_vec};
use module_lwe::encrypt::encrypt;
use module_lwe::decrypt::decrypt;
use ring_lwe::utils::gen_binary_poly;
use polynomial_ring::Polynomial;
use aes_ctr_drbg::DrbgCtx;
use ntt::ntt;

pub struct MLKEM {
    pub params: Parameters,
    pub drbg: Option<DrbgCtx>,
}

impl MLKEM {
    // Constructor to initialize MLKEM with parameters
    pub fn new(params: Parameters) -> Self {
        MLKEM { params, drbg: None}
    }

    /// Set the DRBG to be used for random bytes
    pub fn set_drbg_seed(&mut self, seed: Vec<u8>) {
        let p = vec![48, 0]; // personalization string must be min. 48 bytes long
        let mut drbg = DrbgCtx::new(); // instantiate the DRBG
	    drbg.init(&seed, p); // initialize the DRBG with the seed
        self.drbg = Some(drbg); // Store the DRBG in the struct
    }

    /// keygen function to generate public and secret keys
    /// 
    /// # Returns
    ///
    /// * ((Vec<Vec<Polynomial<i64>>>, Vec<Polynomial<i64>>), Vec<Polynomial<i64>>)
    ///   - A tuple containing the public key (a matrix and a vector) and the secret key (a vector)
    ///
    /// # Example
    /// ```
    /// use ml_kem::utils::Parameters;
    /// use ml_kem::ml_kem::MLKEM;
    /// let params = Parameters::default();
    /// let mlkem = MLKEM::new(params);
    /// let (pk, sk) = mlkem.keygen();
    /// ```
    /// # Note
    /// The public key consists of a matrix `a` and a vector `b`, while the secret key is a vector `s`.
    pub fn keygen(&self) -> ((Vec<Vec<Polynomial<i64>>>, Vec<Polynomial<i64>>), Vec<Polynomial<i64>>) {
        
        let a = gen_uniform_matrix(self.params.n, self.params.k, self.params.q, None); 
        
        let s = gen_small_vector(self.params.n, self.params.k, None);
        let e = gen_small_vector(self.params.n, self.params.k, None);
        
        let b = add_vec(
            &mul_mat_vec_simple(&a, &s, self.params.q, &self.params.f, self.params.omega), 
            &e, 
            self.params.q, 
            &self.params.f
        );
        
        ((a, b), s)
    }

    /// Encapsulate function to generate a shared secret and ciphertext
    ///
    /// # Arguments
    ///
    /// * `pk` - A tuple containing the public key (a matrix and a vector)
    ///
    /// # Returns
    ///
    /// * (Vec<u8>, (Vec<Polynomial<i64>>, Polynomial<i64>))
    ///   - A tuple containing the shared secret (as a byte vector) and the ciphertext (a tuple of a vector and a polynomial)
    ///
    /// # Example
    /// ```
    /// use ml_kem::utils::Parameters;
    /// use ml_kem::ml_kem::MLKEM;
    /// let params = Parameters::default();
    /// let mlkem = MLKEM::new(params);
    /// let (pk, sk) = mlkem.keygen();
    /// let (k, ct) = mlkem.encapsulate(pk);
    /// ```
    /// # Note
    /// The shared secret is generated by hashing the message `m`, which is a binary polynomial of degree `n`.
    pub fn encapsulate(&self, pk: (Vec<Vec<Polynomial<i64>>>, Vec<Polynomial<i64>>)) -> (Vec<u8>, (Vec<Polynomial<i64>>, Polynomial<i64>)) {
        let params_mlwe = module_lwe::utils::Parameters { 
            n: self.params.n, 
            q: self.params.q, 
            k: self.params.k, 
            omega: self.params.omega, 
            f: self.params.f.clone() 
        };

        let mut m = gen_binary_poly(self.params.n, None).coeffs().to_vec();
        m.resize(self.params.n, 0);

        let ct = encrypt(&pk.0, &pk.1, &m, &params_mlwe, None);
        let k = hash_h(m);
        (k, ct)
    }

    /// Decapsulate function to recover the shared secret from the ciphertext and secret key
    ///
    /// # Arguments
    ///
    /// * `sk` - The secret key (a vector of polynomials)
    /// * `ct` - The ciphertext (a tuple of a vector and a polynomial)
    ///
    /// # Returns
    ///
    /// * Vec<u8> - The shared secret (as a byte vector)
    ///
    /// # Example
    /// ```
    /// use ml_kem::utils::Parameters;
    /// use ml_kem::ml_kem::MLKEM;
    /// let params = Parameters::default();
    /// let mlkem = MLKEM::new(params);
    /// let (pk, sk) = mlkem.keygen();
    /// let (k, ct) = mlkem.encapsulate(pk);
    /// let k_recovered = mlkem.decapsulate(sk, ct);
    /// ```
    /// # Note
    /// The shared secret is recovered by decrypting the ciphertext using the secret key and hashing the resulting message `m`.
    pub fn decapsulate(&self, sk: Vec<Polynomial<i64>>, ct: (Vec<Polynomial<i64>>, Polynomial<i64>)) -> Vec<u8> {
        let params_mlwe = module_lwe::utils::Parameters { 
            n: self.params.n, 
            q: self.params.q, 
            k: self.params.k, 
            omega: self.params.omega, 
            f: self.params.f.clone() 
        };

        let mut m = decrypt(&sk, &ct.0, &ct.1, &params_mlwe);
        m.resize(self.params.n, 0);

        hash_h(m)
    }

    /// Generates an encryption key and a corresponding decryption key based on the
    /// specified parameter `d` and following Algorithm 13 (FIPS 203).
    ///
    /// This function generates two 32-byte seeds using the `hash_g` function,
    /// computes the matrix `A_hat`, generates error vectors `s` and `e` from
    /// the Centered Binomial Distribution, applies NTT transformations to `s`
    /// and `e`, and computes the public key (`ek_pke`) and the private key (`dk_pke`).
    ///
    /// # Arguments
    /// * `d` - The input parameter (likely a domain or identifier) to seed the key generation.
    ///
    /// # Returns
    /// * A tuple containing:
    ///   - `ek_pke`: The encryption key, which is the public value `t_hat` encoded with `rho`.
    ///   - `dk_pke`: The decryption key, which is the encoded `s_hat`.
    /// 
    /// # Example
    /// ```
    /// use ml_kem::utils::Parameters;
    /// use ml_kem::ml_kem::MLKEM;
    /// let params = Parameters::default();
    /// let mlkem = MLKEM::new(params);
    /// let d = vec![0x01, 0x02, 0x03, 0x04];
    /// let (ek_pke, dk_pke) = mlkem.generate_k_pke_keygen(d);
    /// ```
    pub fn generate_k_pke_keygen(
        &self,
        d: Vec<u8>,
    ) -> (Vec<u8>, Vec<u8>) {
        // Expand 32 + 1 bytes to two 32-byte seeds.
        // Note: rho, sigma are generated using hash_g
        let (rho, sigma) = hash_g([d.clone(), vec![self.params.k as u8]].concat());

        // Generate A_hat from seed rho
        let a_hat = generate_matrix_from_seed(rho.clone(), self.params.k, self.params.n, false);

        // Set counter for PRF
        let prf_count = 0;

        // Generate the error vectors s and e
        let (s, _prf_count) = generate_error_vector(sigma.clone(), self.params.eta_1, prf_count, self.params.k, self.params.n);
        let (e, _prf_count) = generate_error_vector(sigma.clone(), self.params.eta_1, prf_count, self.params.k, self.params.n);

        // Compute public value (in NTT form)
        let s_hat: Vec<_> = s.iter().map(|poly| Polynomial::new(ntt(poly.coeffs(), self.params.omega, self.params.n, self.params.q))).collect(); //apply NTT to each coeff of s
        let e_hat: Vec<_> = e.iter().map(|poly| Polynomial::new(ntt(poly.coeffs(), self.params.omega, self.params.n, self.params.q))).collect();  // apply NTT to each coeff of e
        let t_hat = add_vec(&mul_mat_vec_simple(&a_hat, &s_hat, self.params.q, &self.params.f, self.params.omega), &e_hat, self.params.q, &self.params.f); // Calculate A_hat @ s_hat + e_hat

        // Encode the keys
        let mut ek_pke = encode_vec(&t_hat, 12); // Encoding vec of polynomials to bytes
        ek_pke.extend_from_slice(&rho); // append rho, output of hash function
        let dk_pke = encode_vec(&s_hat, 12); // Encoding s_hat for dk_pke

        (ek_pke, dk_pke)
    }

}
